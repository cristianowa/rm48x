<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Keil\ARM\Boards\TI\RM48x\RM48x.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Keil\ARM\Boards\TI\RM48x\RM48x.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Sat Jun 09 18:20:08 2012
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; macInit &rArr; initialize_CPPI &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9d]">__user_initial_stackheap</a>
 <LI><a href="#[fd]">_coreInitRegisters_</a>
 <LI><a href="#[fe]">_coreInitStackPointer_</a>
 <LI><a href="#[ff]">_coreEnableVfp_</a>
 <LI><a href="#[100]">_coreEnableEventBusExport_</a>
 <LI><a href="#[101]">_coreDisableEventBusExport_</a>
 <LI><a href="#[102]">_coreEnableRamEcc_</a>
 <LI><a href="#[103]">_coreDisableRamEcc_</a>
 <LI><a href="#[104]">_coreEnableFlashEcc_</a>
 <LI><a href="#[105]">_coreDisableFlashEcc_</a>
 <LI><a href="#[106]">_coreEnableIrqVicOffset_</a>
 <LI><a href="#[107]">_coreGetDataFault_</a>
 <LI><a href="#[108]">_coreClearDataFault_</a>
 <LI><a href="#[109]">_coreGetInstructionFault_</a>
 <LI><a href="#[10a]">_coreClearInstructionFault_</a>
 <LI><a href="#[10b]">_coreGetDataFaultAddress_</a>
 <LI><a href="#[10c]">_coreClearDataFaultAddress_</a>
 <LI><a href="#[10d]">_coreGetInstructionFaultAddress_</a>
 <LI><a href="#[83]">_coreClearInstructionFaultAddress_</a>
 <LI><a href="#[10e]">_coreGetAuxiliaryDataFault_</a>
 <LI><a href="#[7e]">_coreClearAuxiliaryDataFault_</a>
 <LI><a href="#[10f]">_coreGetAuxiliaryInstructionFault_</a>
 <LI><a href="#[110]">_coreClearAuxiliaryInstructionFault_</a>
 <LI><a href="#[111]">_disable_interrupt_</a>
 <LI><a href="#[112]">_disable_FIQ_interrupt_</a>
 <LI><a href="#[113]">_disable_IRQ_interrupt_</a>
 <LI><a href="#[97]">_enable_interrupt_</a>
 <LI><a href="#[114]">_esmCcmErrorsClear_</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">EMACRxCPWrite</a> from emac.o(.text) referenced from debug.o(.text)
 <LI><a href="#[60]">MIBADC2_Parity</a> from parity_functions.o(.text) referenced from mac.o(.text)
 <LI><a href="#[7e]">_coreClearAuxiliaryDataFault_</a> from sys_core.o(.text) referenced from sci_receive.o(.text)
 <LI><a href="#[83]">_coreClearInstructionFaultAddress_</a> from sys_core.o(.text) referenced from sci_receive.o(.text)
 <LI><a href="#[4]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via BLX)
</UL>

<P><STRONG><a name="[6]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via BLX)
</UL>

<P><STRONG><a name="[8]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a1]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a2]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[14]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[7]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via BLX)
</UL>

<P><STRONG><a name="[be]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bf]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[10]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; macInit &rArr; initialize_CPPI &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via BLX)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[15]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9d]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_rm48.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap (via BLX)
</UL>

<P><STRONG><a name="[1a]"></a>adcNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2Group2Interrupt
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2Group1Interrupt
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2Group0Interrupt
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1Group2Interrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1Group1Interrupt
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1Group0Interrupt
</UL>

<P><STRONG><a name="[64]"></a>adcInit</STRONG> (ARM, 192 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC1_Parity
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC2_Parity
</UL>

<P><STRONG><a name="[c2]"></a>adcStartConversion</STRONG> (ARM, 80 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>adcStopConversion</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC1_Parity
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC2_Parity
</UL>

<P><STRONG><a name="[c3]"></a>adcResetFiFo</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>adcGetData</STRONG> (ARM, 256 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>adcIsFifoFull</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>adcIsConversionComplete</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC1_Parity
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC2_Parity
</UL>

<P><STRONG><a name="[17]"></a>adcCalibration</STRONG> (ARM, 352 bytes, Stack size 40 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>

<P><STRONG><a name="[c6]"></a>adcMidPointCalibration</STRONG> (ARM, 284 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>adcEnableNotification</STRONG> (ARM, 44 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>adcDisableNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>adc1Group0Interrupt</STRONG> (ARM, 36 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>

<P><STRONG><a name="[1b]"></a>adc1Group1Interrupt</STRONG> (ARM, 36 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>

<P><STRONG><a name="[1c]"></a>adc1Group2Interrupt</STRONG> (ARM, 36 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>

<P><STRONG><a name="[1d]"></a>adc2Group0Interrupt</STRONG> (ARM, 36 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>

<P><STRONG><a name="[1e]"></a>adc2Group1Interrupt</STRONG> (ARM, 36 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>

<P><STRONG><a name="[1f]"></a>adc2Group2Interrupt</STRONG> (ARM, 36 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>

<P><STRONG><a name="[95]"></a>canInit</STRONG> (ARM, 10864 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>canTransmit</STRONG> (ARM, 132 bytes, Stack size 20 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = canTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_send
</UL>

<P><STRONG><a name="[30]"></a>canGetData</STRONG> (ARM, 176 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[c9]"></a>canIsTxMessagePending</STRONG> (ARM, 48 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>canIsRxMessageArrived</STRONG> (ARM, 48 bytes, Stack size 12 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[ca]"></a>canIsMessageBoxValid</STRONG> (ARM, 48 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>canGetLastError</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>canGetErrorLevel</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>canEnableErrorNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>canDisableErrorNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>canErrorNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can3HighLevelInterrupt
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2HighLevelInterrupt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1HighLevelInterrupt
</UL>

<P><STRONG><a name="[20]"></a>can1HighLevelInterrupt</STRONG> (ARM, 140 bytes, Stack size 32 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canErrorNotification
</UL>

<P><STRONG><a name="[23]"></a>can1LowLevelInterrupt</STRONG> (ARM, 108 bytes, Stack size 32 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[24]"></a>can2HighLevelInterrupt</STRONG> (ARM, 140 bytes, Stack size 32 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canErrorNotification
</UL>

<P><STRONG><a name="[25]"></a>can2LowLevelInterrupt</STRONG> (ARM, 208 bytes, Stack size 32 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[26]"></a>can3HighLevelInterrupt</STRONG> (ARM, 132 bytes, Stack size 32 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canErrorNotification
</UL>

<P><STRONG><a name="[27]"></a>can3LowLevelInterrupt</STRONG> (ARM, 104 bytes, Stack size 32 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[28]"></a>can_protocol_message_arrived</STRONG> (ARM, 36 bytes, Stack size 8 bytes, can_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_receive_fragment
</UL>

<P><STRONG><a name="[2a]"></a>can_protocol_receive_fragment</STRONG> (ARM, 224 bytes, Stack size 16 bytes, can_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_message_arrived
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[2b]"></a>can_protocol_send</STRONG> (ARM, 396 bytes, Stack size 40 bytes, can_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = can_protocol_send &rArr; print_line &rArr; new_line &rArr; sciDisplayText
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>

<P><STRONG><a name="[22]"></a>canMessageNotification</STRONG> (ARM, 212 bytes, Stack size 24 bytes, can_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_receive_fragment
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canIsRxMessageArrived
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canGetData
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can3LowLevelInterrupt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can3HighLevelInterrupt
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2LowLevelInterrupt
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2HighLevelInterrupt
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1LowLevelInterrupt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1HighLevelInterrupt
</UL>

<P><STRONG><a name="[31]"></a>debug_print</STRONG> (ARM, 32 bytes, Stack size 16 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[32]"></a>dump_memory</STRONG> (ARM, 200 bytes, Stack size 24 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dummy_send
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_transmit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_hdp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory_promt
</UL>

<P><STRONG><a name="[35]"></a>dump_memory_promt</STRONG> (ARM, 52 bytes, Stack size 24 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promt_question
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mac_state
</UL>

<P><STRONG><a name="[53]"></a>EMACTxIntPulseEnable</STRONG> (ARM, 52 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMACTxIntPulseEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[cf]"></a>EMACTxIntPulseDisable</STRONG> (ARM, 52 bytes, Stack size 12 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>EMACRxIntPulseEnable</STRONG> (ARM, 52 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMACRxIntPulseEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[d0]"></a>EMACRxIntPulseDisable</STRONG> (ARM, 52 bytes, Stack size 12 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>EMACRMIISpeedSet</STRONG> (ARM, 28 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>EMACMIIEnable</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[49]"></a>EMACDuplexSet</STRONG> (ARM, 28 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_setup
</UL>

<P><STRONG><a name="[4f]"></a>EMACTxEnable</STRONG> (ARM, 12 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[50]"></a>EMACRxEnable</STRONG> (ARM, 12 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[62]"></a>EMACTxHdrDescPtrWrite</STRONG> (ARM, 48 bytes, Stack size 8 bytes, emac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_transmit
</UL>

<P><STRONG><a name="[51]"></a>EMACRxHdrDescPtrWrite</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[56]"></a>EMACInit</STRONG> (ARM, 192 bytes, Stack size 8 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMACInit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[59]"></a>EMACMACSrcAddrSet</STRONG> (ARM, 52 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[5a]"></a>EMACMACAddrSet</STRONG> (ARM, 76 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMACMACAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[4c]"></a>EMACCoreIntAck</STRONG> (ARM, 8 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[d2]"></a>EMACTxCPWrite</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>EMACRxCPWrite</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>EMACRxIntAckToClear</STRONG> (ARM, 24 bytes, Stack size 8 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>EMACRxBroadCastEnable</STRONG> (ARM, 36 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[4d]"></a>EMACRxUnicastSet</STRONG> (ARM, 20 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[4e]"></a>EMACNumFreeBufSet</STRONG> (ARM, 16 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
</UL>

<P><STRONG><a name="[d4]"></a>EMACIntVectorGet</STRONG> (ARM, 12 bytes, Stack size 0 bytes, emac.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>esmInit</STRONG> (ARM, 196 bytes, Stack size 0 bytes, esm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>esmError</STRONG> (ARM, 12 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>esmEnableError</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcErrorNotification
</UL>

<P><STRONG><a name="[d6]"></a>esmDisableError</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>esmTriggerErrorPinReset</STRONG> (ARM, 36 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
</UL>

<P><STRONG><a name="[d7]"></a>esmActivateNormalOperation</STRONG> (ARM, 12 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>esmEnableInterrupt</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>esmDisableInterrupt</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>esmSetInterruptLevel</STRONG> (ARM, 60 bytes, Stack size 12 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>esmClearStatus</STRONG> (ARM, 24 bytes, Stack size 8 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>esmClearStatusBuffer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>esmSetCounterPreloadValue</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>esmGetStatus</STRONG> (ARM, 56 bytes, Stack size 20 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>esmGetStatusBuffer</STRONG> (ARM, 56 bytes, Stack size 20 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>esmGroup1Notification</STRONG> (ARM, 36 bytes, Stack size 8 bytes, esm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmLowInterrupt
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmHighInterrupt
</UL>

<P><STRONG><a name="[38]"></a>esmGroup2Notification</STRONG> (ARM, 36 bytes, Stack size 8 bytes, esm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmHighInterrupt
</UL>

<P><STRONG><a name="[39]"></a>esmHighInterrupt</STRONG> (ARM, 216 bytes, Stack size 32 bytes, esm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup2Notification
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup1Notification
</UL>

<P><STRONG><a name="[3a]"></a>esmLowInterrupt</STRONG> (ARM, 116 bytes, Stack size 32 bytes, esm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup1Notification
</UL>

<P><STRONG><a name="[94]"></a>gioInit</STRONG> (ARM, 176 bytes, Stack size 0 bytes, gio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>gioSetDirection</STRONG> (ARM, 8 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>gioSetBit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>gioSetPort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>gioGetBit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>gioGetPort</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>gioToggleBit</STRONG> (ARM, 48 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>gioEnableNotification</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>gioDisableNotification</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>gioHighLevelInterrupt</STRONG> (ARM, 40 bytes, Stack size 32 bytes, gio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioNotification
</UL>

<P><STRONG><a name="[3d]"></a>gioLowLevelInterrupt</STRONG> (ARM, 40 bytes, Stack size 32 bytes, gio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioNotification
</UL>

<P><STRONG><a name="[3e]"></a>hetInit</STRONG> (ARM, 168 bytes, Stack size 8 bytes, het.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hetInit &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>pwmStart</STRONG> (ARM, 40 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>pwmStop</STRONG> (ARM, 40 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>pwmSetDuty</STRONG> (ARM, 220 bytes, Stack size 16 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>pwmSetSignal</STRONG> (ARM, 260 bytes, Stack size 28 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>pwmGetSignal</STRONG> (ARM, 248 bytes, Stack size 24 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>pwmEnableNotification</STRONG> (ARM, 28 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>pwmDisableNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>edgeResetCounter</STRONG> (ARM, 20 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>edgeGetCounter</STRONG> (ARM, 24 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>edgeEnableNotification</STRONG> (ARM, 28 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>edgeDisableNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>capGetSignal</STRONG> (ARM, 188 bytes, Stack size 24 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>hetResetTimestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>hetGetTimestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>het1HighLevelInterrupt</STRONG> (ARM, 96 bytes, Stack size 32 bytes, het.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmNotification
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeNotification
</UL>

<P><STRONG><a name="[43]"></a>het1LowLevelInterrupt</STRONG> (ARM, 96 bytes, Stack size 32 bytes, het.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmNotification
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edgeNotification
</UL>

<P><STRONG><a name="[44]"></a>mac_debug</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[4a]"></a>smallDelay</STRONG> (ARM, 48 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_setup
</UL>

<P><STRONG><a name="[45]"></a>initialize_CPPI</STRONG> (ARM, 176 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = initialize_CPPI &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[46]"></a>link_setup</STRONG> (ARM, 108 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = link_setup &rArr; Dp83640AutoNegotiate &rArr; MDIOPhyRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640PartnerAbilityGet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640AutoNegotiate
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallDelay
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACDuplexSet
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[4b]"></a>enable_transmission</STRONG> (ARM, 208 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = enable_transmission &rArr; EMACRxIntPulseEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACNumFreeBufSet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxUnicastSet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACCoreIntAck
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxHdrDescPtrWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxEnable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTxEnable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACMIIEnable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxIntPulseEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTxIntPulseEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[55]"></a>macInit</STRONG> (ARM, 704 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = macInit &rArr; initialize_CPPI &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOPhyAliveStatusGet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640LinkStatusGet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640IDGet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_transmission
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_setup
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_CPPI
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallDelay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxBroadCastEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACMACAddrSet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACMACSrcAddrSet
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>dump_hdp</STRONG> (ARM, 32 bytes, Stack size 16 bytes, mac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_transmit
</UL>

<P><STRONG><a name="[5f]"></a>dump_mac_state</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory_promt
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mac
</UL>

<P><STRONG><a name="[61]"></a>eth_transmit</STRONG> (ARM, 172 bytes, Stack size 16 bytes, mac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_hdp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTxHdrDescPtrWrite
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dummy_send
</UL>

<P><STRONG><a name="[63]"></a>eth_dummy_send</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_transmit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dummy_packet
</UL>

<P><STRONG><a name="[6a]"></a>MDIOPhyRegRead</STRONG> (ARM, 100 bytes, Stack size 8 bytes, mdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MDIOPhyRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640PartnerAbilityGet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640LinkStatusGet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640IDGet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640AutoNegotiate
</UL>

<P><STRONG><a name="[6c]"></a>MDIOPhyRegWrite</STRONG> (ARM, 68 bytes, Stack size 12 bytes, mdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MDIOPhyRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640AutoNegotiate
</UL>

<P><STRONG><a name="[5c]"></a>MDIOPhyAliveStatusGet</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[6b]"></a>MDIOPhyLinkStatusGet</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dp83640LinkStatusGet
</UL>

<P><STRONG><a name="[57]"></a>MDIOInit</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[68]"></a>adcGetSingleData</STRONG> (ARM, 52 bytes, Stack size 12 bytes, parity_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adcGetSingleData
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC1_Parity
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC2_Parity
</UL>

<P><STRONG><a name="[65]"></a>adcStartConversion_selChn</STRONG> (ARM, 32 bytes, Stack size 12 bytes, parity_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adcStartConversion_selChn
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC1_Parity
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC2_Parity
</UL>

<P><STRONG><a name="[84]"></a>DCAN1_Parity</STRONG> (ARM, 280 bytes, Stack size 0 bytes, parity_functions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_test
</UL>

<P><STRONG><a name="[85]"></a>DCAN2_Parity</STRONG> (ARM, 280 bytes, Stack size 0 bytes, parity_functions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_test
</UL>

<P><STRONG><a name="[86]"></a>DCAN3_Parity</STRONG> (ARM, 256 bytes, Stack size 0 bytes, parity_functions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_test
</UL>

<P><STRONG><a name="[60]"></a>MIBADC2_Parity</STRONG> (ARM, 172 bytes, Stack size 24 bytes, parity_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MIBADC2_Parity &rArr; adcStartConversion_selChn
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStartConversion_selChn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetSingleData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcIsConversionComplete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStopConversion
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>MIBADC1_Parity</STRONG> (ARM, 172 bytes, Stack size 24 bytes, parity_functions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStartConversion_selChn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetSingleData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcIsConversionComplete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStopConversion
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[5b]"></a>Dp83640IDGet</STRONG> (ARM, 88 bytes, Stack size 24 bytes, phy_dp83640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dp83640IDGet &rArr; MDIOPhyRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOPhyRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[5d]"></a>Dp83640LinkStatusGet</STRONG> (ARM, 164 bytes, Stack size 24 bytes, phy_dp83640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dp83640LinkStatusGet &rArr; MDIOPhyRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOPhyLinkStatusGet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOPhyRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>

<P><STRONG><a name="[47]"></a>Dp83640AutoNegotiate</STRONG> (ARM, 312 bytes, Stack size 24 bytes, phy_dp83640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Dp83640AutoNegotiate &rArr; MDIOPhyRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOPhyRegWrite
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOPhyRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_setup
</UL>

<P><STRONG><a name="[48]"></a>Dp83640PartnerAbilityGet</STRONG> (ARM, 40 bytes, Stack size 16 bytes, phy_dp83640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dp83640PartnerAbilityGet &rArr; MDIOPhyRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOPhyRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_setup
</UL>

<P><STRONG><a name="[6e]"></a>sciSendByte</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisplayText
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisplayTextInternal
</UL>

<P><STRONG><a name="[6d]"></a>sciDisplayTextInternal</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciSendByte
</UL>

<P><STRONG><a name="[90]"></a>sciInit</STRONG> (ARM, 192 bytes, Stack size 0 bytes, sci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcStartSelfTest
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcErrorNotification
</UL>

<P><STRONG><a name="[f5]"></a>sciSetFunctional</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>sciSetBaudrate</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>sciIsTxReady</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>sciSend</STRONG> (ARM, 192 bytes, Stack size 20 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>sciIsRxReady</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>sciRxError</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>sciReceiveByte</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_key_pressed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_wait
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_byte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_string
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linHighLevelInterrupt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promt_question
</UL>

<P><STRONG><a name="[fb]"></a>sciReceive</STRONG> (ARM, 152 bytes, Stack size 12 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>sciEnableNotification</STRONG> (ARM, 76 bytes, Stack size 12 bytes, sci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sciEnableNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_key_pressed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_wait
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_byte
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promt_question
</UL>

<P><STRONG><a name="[80]"></a>sciDisableNotification</STRONG> (ARM, 76 bytes, Stack size 12 bytes, sci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sciDisableNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_key_pressed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_wait
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_byte
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promt_question
</UL>

<P><STRONG><a name="[6f]"></a>linLowLevelInterrupt</STRONG> (ARM, 432 bytes, Stack size 32 bytes, sci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciNotification
</UL>

<P><STRONG><a name="[71]"></a>linHighLevelInterrupt</STRONG> (ARM, 492 bytes, Stack size 40 bytes, sci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciNotification
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciReceiveByte
</UL>

<P><STRONG><a name="[73]"></a>sciDisplayText</STRONG> (ARM, 68 bytes, Stack size 16 bytes, sci_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sciDisplayText
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_digit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[74]"></a>new_line</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sci_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = new_line &rArr; sciDisplayText
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisplayText
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>

<P><STRONG><a name="[2c]"></a>print</STRONG> (ARM, 24 bytes, Stack size 8 bytes, sci_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = print &rArr; sciDisplayText
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisplayText
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_CPPI
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_debug
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioNotification
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup2Notification
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup1Notification
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promt_question
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_send
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[29]"></a>print_line</STRONG> (ARM, 28 bytes, Stack size 8 bytes, sci_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = print_line &rArr; new_line &rArr; sciDisplayText
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_line
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisplayText
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcStartSelfTest
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcErrorNotification
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dummy_packet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mac
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_message
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_debug
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioNotification
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup2Notification
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup1Notification
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promt_question
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_send
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_message_arrived
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[75]"></a>print_digit</STRONG> (ARM, 40 bytes, Stack size 16 bytes, sci_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisplayText
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[2e]"></a>print_number</STRONG> (ARM, 148 bytes, Stack size 24 bytes, sci_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_digit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioNotification
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup2Notification
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup1Notification
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMessageNotification
</UL>

<P><STRONG><a name="[34]"></a>print_hex</STRONG> (ARM, 92 bytes, Stack size 24 bytes, sci_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hprint
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_CPPI
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory
</UL>

<P><STRONG><a name="[7a]"></a>hprint</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sci_print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
</UL>

<P><STRONG><a name="[7b]"></a>boot_message</STRONG> (ARM, 72 bytes, Stack size 8 bytes, sci_print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = boot_message &rArr; print_line &rArr; new_line &rArr; sciDisplayText
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>sci_receive_string</STRONG> (ARM, 56 bytes, Stack size 16 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>

<P><STRONG><a name="[7d]"></a>can_send</STRONG> (ARM, 76 bytes, Stack size 112 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_string
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_send
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
</UL>

<P><STRONG><a name="[7f]"></a>sci_receive_byte</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisableNotification
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_test
</UL>

<P><STRONG><a name="[82]"></a>parity_test</STRONG> (ARM, 192 bytes, Stack size 8 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_byte
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIBADC2_Parity
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCAN3_Parity
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCAN2_Parity
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCAN1_Parity
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
</UL>

<P><STRONG><a name="[87]"></a>dump_mac</STRONG> (ARM, 28 bytes, Stack size 8 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mac_state
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
</UL>

<P><STRONG><a name="[88]"></a>send_dummy_packet</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_dummy_send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
</UL>

<P><STRONG><a name="[89]"></a>sci_receive_rotine</STRONG> (ARM, 740 bytes, Stack size 8 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stc_test
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dummy_packet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mac
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmTriggerErrorPinReset
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciNotification
</UL>

<P><STRONG><a name="[70]"></a>sciNotification</STRONG> (ARM, 28 bytes, Stack size 16 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linHighLevelInterrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linLowLevelInterrupt
</UL>

<P><STRONG><a name="[8c]"></a>sci_receive_wait</STRONG> (ARM, 56 bytes, Stack size 8 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisableNotification
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciReceiveByte
</UL>

<P><STRONG><a name="[8d]"></a>sci_receive_key_pressed</STRONG> (ARM, 68 bytes, Stack size 16 bytes, sci_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisableNotification
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciReceiveByte
</UL>

<P><STRONG><a name="[36]"></a>promt_question</STRONG> (ARM, 116 bytes, Stack size 16 bytes, sci_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = promt_question &rArr; print_line &rArr; new_line &rArr; sciDisplayText
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisableNotification
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciReceiveByte
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_memory_promt
</UL>

<P><STRONG><a name="[92]"></a>stcInit</STRONG> (ARM, 52 bytes, Stack size 0 bytes, stc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stc_test
</UL>

<P><STRONG><a name="[8e]"></a>stcErrorNotification</STRONG> (ARM, 32 bytes, Stack size 8 bytes, stc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmEnableError
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcStartSelfTest
</UL>

<P><STRONG><a name="[fc]"></a>restoreAfterSelfTest</STRONG> (ARM, 4 bytes, Stack size 0 bytes, stc.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>stcStartSelfTest</STRONG> (ARM, 112 bytes, Stack size 8 bytes, stc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcErrorNotification
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stc_test
</UL>

<P><STRONG><a name="[8b]"></a>stc_test</STRONG> (ARM, 16 bytes, Stack size 8 bytes, stc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcStartSelfTest
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_receive_rotine
</UL>

<P><STRONG><a name="[11]"></a>main</STRONG> (ARM, 136 bytes, Stack size 0 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; macInit &rArr; initialize_CPPI &rArr; print_hex &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enable_interrupt_
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_message
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hetInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioEnableNotification
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;promt_question
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_protocol_send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main (via BLX)
</UL>

<P><STRONG><a name="[41]"></a>pwmNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het1LowLevelInterrupt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het1HighLevelInterrupt
</UL>

<P><STRONG><a name="[42]"></a>edgeNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het1LowLevelInterrupt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het1HighLevelInterrupt
</UL>

<P><STRONG><a name="[3c]"></a>gioNotification</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sys_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioLowLevelInterrupt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioHighLevelInterrupt
</UL>

<P><STRONG><a name="[fd]"></a>_coreInitRegisters_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_coreInitStackPointer_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>_coreEnableVfp_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_coreEnableEventBusExport_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>_coreDisableEventBusExport_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>_coreEnableRamEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>_coreDisableRamEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>_coreEnableFlashEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>_coreDisableFlashEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_coreEnableIrqVicOffset_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_coreGetDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>_coreClearDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_coreGetInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>_coreClearInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>_coreGetDataFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_coreClearDataFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_coreGetInstructionFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_coreClearInstructionFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sci_receive.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>_coreGetAuxiliaryDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_coreClearAuxiliaryDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sci_receive.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>_coreGetAuxiliaryInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>_coreClearAuxiliaryInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>_disable_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>_disable_FIQ_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>_disable_IRQ_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_enable_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>_esmCcmErrorsClear_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex (via BLX)
</UL>

<P><STRONG><a name="[99]"></a>__printf</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[a]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[115]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>strlen</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send (via BLX)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex (via BLX)
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hetInit
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send (via BLX)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcCalibration (via BLX)
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[98]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[12]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[120]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[121]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[124]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[125]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_idiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$sdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number (via BLX)
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_idivmod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$sdivmod), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number (via BLX)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
